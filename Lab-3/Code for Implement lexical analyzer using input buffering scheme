#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <stdbool.h>
#include <string.h>
#define BUFFER_SIZE 15
bool is_operator(char ch) {
	char oper[] = "!%^&*-+=~|.<>/?";
	for (int i = 0; i < 14; i++) {
		if (ch == oper[i]) {
			return true;
		}
	}
	return false;
}

bool is_special_char(char ch) {//not a number or an alphabet
	if (isalnum(ch) || ch == '_' || is_operator(ch)) {
		return false;
	}
	return true;
}

void print_type(char* token) {
	if (isalpha(token[0]) || token[0] == '_') {
		printf("%s is an identifier.\n", token);
	}
	else if (isdigit(token[0])) {
		printf("%s is a number.\n", token);
	}
	else if (is_operator(token[0])) {
		printf("%s is an operator.\n", token);
	}
}

int main() {
	char buffer[BUFFER_SIZE];
	int lexeme_begin = 0, forward = 0, j = 0, k = 0, flag = 0;
	char token[BUFFER_SIZE] = { "" };

	//Taking input form user
	printf("Enter a message: \n");
	gets_s(buffer, BUFFER_SIZE);

	//traversing message
	for (int i = 0; i < BUFFER_SIZE; i++) {
		if (buffer[i] != '\0') {
			if (is_special_char(buffer[i]))
			{
				for (int i = lexeme_begin; i < forward; i++) {
					token[j] += buffer[i];
					j++;
				}
				print_type(token);

				memset(token, '\0', BUFFER_SIZE);
				forward++;
				lexeme_begin = forward;
				j = 0;
			}
			else {
				forward++;
			}
		}
		else {
			for (int i = lexeme_begin; i < forward; i++) {
				token[j] += buffer[i];
				j++;
			}
			print_type(token);
			break;
		}
	}
	system("pause");
}

